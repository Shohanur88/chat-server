{"version":3,"sources":["component/Chatroom/Chatroom.js","socket-contex.js","component/Login/Login.js","component/Register/Register.js","App.js","index.js"],"names":["Chatroom","React","createContext","props","removeUser","e","socket","emit","target","value","userPaste","on","data","container","document","getElementById","element","i","forEach","row","push","key","toString","className","status","username","onClick","userid","ReactDOM","render","error","alert","onChange","setState","name","viewSingleMsg","json","d","time","split","Date","toLocaleTimeString","timeZone","hour12","hour","minute","node1","createElement","node2","node3","node4","node5","textnode1","createTextNode","textnode2","textnode3","decodeURIComponent","message","appendChild","deleteMsg","preventDefault","history","Logout","window","location","reload","addMember","dateIso","toISOString","msgframe","uid","state","encodeURIComponent","input_msg","msg","userinfo","role","off","bind","number","this","r","viewMsg","scrollTop","scrollHeight","k","res","msgdisp","id","placeholder","type","Component","Login","password","check","onSubmit","action","method","loginServer","defaultProps","Register","goHome","fname","selected","io","connect","App","path","exact","component","querySelector"],"mappings":"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","file":"static/js/main.23560971.chunk.js","sourcesContent":["import React, { Component } from \"react\"; \r\nimport ReactDOM from 'react-dom';\r\nimport queryString from 'query-string';\r\nimport io from \"socket.io-client\";\r\nimport SocketContext from '../../socket-contex'\r\nimport './Chatroom.css';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n//let socket;\r\n//const ENDPOINT = 'localhost:5000';\r\n\r\nclass Chatroom extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            input_msg:'',\r\n            msg:[],\r\n            userinfo:[],\r\n            role:'',\r\n            username:''\r\n            \r\n        }\r\n        \r\n        this.props.socket.off('delete_Msg');\r\n        this.props.socket.off('login');\r\n        this.props.socket.off('event-insert_msg');\r\n        this.props.socket.off('remove_user_back');\r\n        this.props.socket.off('broadcast_msg');\r\n        this.props.socket.off('msg_fetch_from_initial');\r\n        this.props.socket.off('user_information');\r\n        this.props.socket.off('stay_logged');\r\n        this.props.socket.off('check_login'); //insert_msg\r\n        this.props.socket.off('insert_msg');\r\n        \r\n        \r\n        this.onChange = this.onChange.bind(this);\r\n        this.onClick = this.onClick.bind(this);\r\n        //socket = io.connect(ENDPOINT);\r\n    }\r\n\r\n\r\n    /********** Remove User ***********/\r\n\r\n    removeUser=(e)=>{\r\n        this.props.socket.emit('remove_user',e.target.value); \r\n        //console.log('5');       \r\n    }\r\n\r\n    /**********End Remove User***********/\r\n\r\n    /**********View User***********/\r\n\r\n    userPaste=()=>{\r\n             \r\n            this.props.socket.on('user_information',(data)=>{\r\n            let container = document.getElementById(\"user-field\");\r\n            let element=[];\r\n            let i = 1;\r\n            data.forEach((row)=>{\r\n                element.push(<li key={i.toString()}><span className={row.status}></span><span className=\"member\">{row.username}</span> <span><button className=\"float-right\" onClick={this.removeUser} value={row.userid}>Delete</button></span></li>);\r\n                i++;\r\n            }) ;\r\n\r\n               try {\r\n                ReactDOM.render(element,container);\r\n               } catch (error) {\r\n                   alert(\"Please Reload and Login Again!!!\");\r\n               }\r\n            \r\n            });\r\n            \r\n    }\r\n\r\n    /**********End View User***********/\r\n\r\n    /********** View Msg ***********/\r\n\r\n    viewMsg(number,msg){\r\n\r\n        var d = msg.time.split('T');\r\n        d[1] = new Date(msg.time)\r\n        .toLocaleTimeString({},\r\n        {timeZone:'UTC',hour12:true,hour:'numeric',minute:'numeric'});\r\n        \r\n        return(\r\n        <div key={number.toString()}  className=\"client-msg\">\r\n            <div className=\"client-des\">\r\n                <span className=\"client-name\">{msg.username}</span> \r\n                <small className=\"client-msg-time\">{d[0]+','+d[1]}</small> :\r\n            </div>\r\n            <div className=\"msg\">{msg.message}</div>\r\n        </div>);\r\n\r\n    }\r\n\r\n    /**********End View User***********/\r\n\r\n    /******************* Start Of ComponentDidMount Function ***************************/\r\n\r\n    componentDidMount(){\r\n      \r\n        /******************* This Piece of Code Check If Logged In Or Not***************************/\r\n        \r\n        this.props.socket.on('stay_logged',(r)=>{\r\n            if(r === false){\r\n                this.props.history.push(\"/\");\r\n            }     \r\n        });\r\n        this.props.socket.emit('stay_logged','k');\r\n\r\n        /******************* End This Piece of Code Check If Logged In Or Not***************************/\r\n        \r\n        /*******************  This Piece of Code Initiate & Receive Username & Role***************************/\r\n\r\n        this.props.socket.on('check_login',(r)=>{\r\n            \r\n           try {\r\n\r\n                this.setState({role:r.role});\r\n                this.setState({username:r.username});\r\n                \r\n\r\n                let container = document.getElementById('uname');\r\n                ReactDOM.render('Username :'+r.username,container);\r\n                if (r.role===2) {\r\n                    container = document.getElementById('showuser');\r\n                    ReactDOM.render(' ',container);\r\n                    container = document.getElementById('addmem');\r\n                    ReactDOM.render(' ',container);\r\n                    container = document.getElementById('delete_msg');\r\n                    ReactDOM.render(' ',container);\r\n                }\r\n            else{\r\n                    \r\n                }\r\n\r\n           } catch (error) {\r\n               window.location.reload();\r\n           } \r\n            \r\n\r\n        });\r\n\r\n        this.props.socket.emit('check_login',true);\r\n            \r\n        /*******************End This Piece of Code Initiate & Receive Username & Role ***************************/\r\n\r\n        /******************* Say It is Chatroom Page ***************************/\r\n\r\n        this.props.socket.emit('page_chatroom','chatroom');\r\n\r\n        /******************* End Say It is Chatroom Page ***************************/\r\n\r\n                    \r\n       /******************* This Piece of Code Fetch Load Previous 100 Message At 1st time ***************************/\r\n\r\n         this.props.socket.on('msg_fetch_from_initial',msg=>{\r\n            let element=[];\r\n            let container = document.getElementById('view-msg');\r\n            let i = 1;\r\n            msg.forEach((row)=>{\r\n                row.message = decodeURIComponent(row.message);\r\n                this.state.msg.push(row);\r\n                element.push(this.viewMsg(i,row));\r\n                i++;   \r\n            });\r\n            //element = msg.\r\n            ReactDOM.render(element,container);\r\n            container.scrollTop = container.scrollHeight;\r\n         });\r\n\r\n        /******************* End This Piece of Code Fetch Load Previous 100 Message At 1st time ***************************/\r\n        \r\n        /******************* This Piece of Code Fetch  Any Broadcasted Msg ***************************/\r\n        this.props.socket.on(\"broadcast_msg\", msg => {\r\n\r\n            let container = document.getElementById('view-msg');\r\n            this.state.msg.push(msg);\r\n            msg.message = decodeURIComponent(msg.message);\r\n            this.viewSingleMsg(msg);\r\n            container.scrollTop=container.scrollHeight;\r\n\r\n        });\r\n          \r\n        /******************* Ens This Piece of Code Fetch  Any Broadcasted Msg ***************************/\r\n\r\n        /*******************  This Piece of Code Fetch  Remove User Rq ***************************/\r\n\r\n        this.props.socket.on('remove_user_back',(k)=>{\r\n            alert(k);\r\n            //console.log('5');\r\n        });\r\n\r\n        /******************* End This Piece of Code Fetch  Remove User Rq ***************************/\r\n\r\n        /******************* This Piece of Code Fetch Users list***************************/\r\n\r\n        this.userPaste();\r\n        \r\n        /******************* This Piece of Code Fetch Users list***************************/\r\n\r\n        /******************* Fetch Single msg ***************************/\r\n\r\n        this.props.socket.on('insert_msg',(res,msgdisp)=>{\r\n                \r\n            if(res===true){\r\n                    \r\n                    /****************    Display Msg    ************* */\r\n                    \r\n                    this.viewSingleMsg(msgdisp);\r\n                    \r\n                    /****************     End Msg Display        ************* */\r\n                    \r\n                    /****** Bottom scroll bar *****/\r\n\r\n                    let container = document.getElementById(\"view-msg\");\r\n                    container.scrollTop = container.scrollHeight;\r\n                \r\n                    /****** End Bottom scroll bar *****/\r\n                }\r\n                \r\n            });\r\n\r\n            /******************* Fetch Single Msg End ***************************/\r\n\r\n            /******************* Delete All Msg ***************************/\r\n            \r\n            // this.props.socket.on('delete_Msg',(r)=>{\r\n                \r\n            //     console.log(r);\r\n            //     if(r === true){\r\n            //         alert('All Message Deleted Successfully!!!');\r\n            //         //ReactDOM.render('',document.getElementById('view-msg'));\r\n            //     }\r\n            //     else{\r\n            //         alert('The Message Database is Empty Or There are a Problem!!')\r\n            //     }\r\n\r\n            // });\r\n\r\n            /******************* End Delete All Msg ***************************/\r\n\r\n    }  \r\n\r\n    /******************* End Of ComponentDidMount Function ***************************/\r\n\r\n    /******************* Start Onchange Function ***************************/\r\n\r\n    onChange=(e)=>{\r\n        this.setState({[e.target.name]:e.target.value});\r\n    }\r\n\r\n    /******************* End Onchange Function ***************************/\r\n\r\n    /******************* Start ViewSingleMsg Function ***************************/\r\n\r\n    viewSingleMsg=(json)=>{\r\n        var d = json.time.split('T');\r\n        d[1] = new Date(json.time)\r\n        .toLocaleTimeString({},\r\n        {timeZone:'UTC',hour12:true,hour:'numeric',minute:'numeric'});\r\n        const node1 = document.createElement(\"div\");                 // Create a <li> node\r\n        node1.className = \"client-msg\";\r\n        var node2= document.createElement(\"div\");\r\n        node2.className=\"client-des\";\r\n        var node3= document.createElement(\"span\");\r\n        node3.className=\"client-name\";\r\n        var node4= document.createElement(\"small\");\r\n        node4.className=\"client-msg-time\";\r\n        var node5= document.createElement(\"div\");\r\n        node5.className=\"msg\";\r\n        \r\n        var textnode1 = document.createTextNode(json.username);\r\n        var textnode2 = document.createTextNode(d[0]+','+d[1]);\r\n        var textnode3 = document.createTextNode(decodeURIComponent(json.message));        // Create a text node\r\n        \r\n        node5.appendChild(textnode3);\r\n        node4.appendChild(textnode2);\r\n        node3.appendChild(textnode1);\r\n        node2.appendChild(node3);\r\n        node2.appendChild(node4);\r\n        node1.appendChild(node2);\r\n        //node1 = null;\r\n        node1.appendChild(node5);                      \r\n        document.getElementById(\"view-msg\").appendChild(node1);\r\n    }\r\n\r\n    /******************* End ViewSingleMsg Function ***************************/\r\n\r\n    /******************* Delete All Msg ***************************/\r\n\r\n    deleteMsg=(e)=>{\r\n\r\n        e.preventDefault();\r\n        this.props.socket.emit('delete_Msg','delete');\r\n        this.props.history.push(\"/\");\r\n    }\r\n\r\n    /******************* Delete All Msg ***************************/\r\n\r\n    /******************* Start Logout Function ***************************/\r\n\r\n    Logout=(e)=>{\r\n        e.preventDefault();\r\n        this.props.socket.emit('logout',true);\r\n        this.props.history.push(\"/\");\r\n        window.location.reload();\r\n    }\r\n\r\n    /******************* End Logout Function ***************************/\r\n\r\n    /******************* Start addMember Function ***************************/\r\n\r\n    addMember=(e)=>{\r\n        e.preventDefault();\r\n        this.props.history.push(\"/register\");\r\n    }\r\n\r\n    /******************* End addMember Function ***************************/\r\n\r\n\r\n    /******************* Start Send Message  Function ***************************/\r\n\r\n    onClick=(e)=>{\r\n        \r\n        e.preventDefault();\r\n        var dateobj = new Date(); \r\n        var dateIso = dateobj.toISOString();\r\n        let msgframe = {\r\n            uid:'',\r\n            username:this.state.username,//this.state.userinfo[0],\r\n            time: dateIso,\r\n            message: encodeURIComponent(this.state.input_msg),  \r\n        };\r\n\r\n        this.state.msg.push({\r\n            username:this.state.username,\r\n            time: dateIso,\r\n            message: this.state.input_msg\r\n        });\r\n        \r\n        if(this.state.input_msg === ''){\r\n\r\n            alert('Can not send empty Msg!!');\r\n        \r\n        }\r\n        else{\r\n\r\n            this.props.socket.emit('insert_msg',msgframe);\r\n            this.setState({input_msg:''});\r\n        \r\n        }\r\n        \r\n    }\r\n\r\n    /******************* End Send Message  Function ***************************/\r\n    \r\n  render() {\r\n    return(\r\n        <div className=\"container all-body\" >\r\n            <div className=\"row top\">\r\n                <div className=\"col-md-6 heading\">\r\n                    <h4 id=\"head\">Chatroom</h4>\r\n                </div>\r\n                <div className=\"col-md-6 control text-right\">\r\n                    <span id=\"uname\" className=\"control-single\">Username: Unknown </span>|\r\n                    <span id=\"addmem\" className=\"control-single\"><button className=\"top-link\" onClick={this.addMember}> Add Member |</button></span>\r\n                    <span id=\"delete_msg\" className=\"control-single\"><button onClick={this.deleteMsg} className=\"top-link\">Delete Message |</button></span>\r\n                    <span className=\"control-single\"><button onClick={this.Logout} className=\"top-link\">Logout</button></span>|\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div id=\"showuser\" className=\"col-md-3 users\">\r\n                    <p>Members:</p>\r\n                    <ul id=\"user-field\" className=\"users-ul\" >\r\n                        {/* <li><span className=\"active\"></span><span className=\"member\">Monirul</span> <span><button className=\"float-right\">Delete</button></span></li> */}\r\n                        {/* <li><span className=\"inactive\"></span><span className=\"member\">Ruman</span> <span><button className=\"float-right\">Delete</button></span></li> */}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"col-md-9 chat\">\r\n                    <div id=\"view-msg\" className=\"chat-area\">\r\n                        {/* <div  className=\"client-msg\">\r\n                            <div className=\"client-des\">\r\n                                \r\n                                <span className=\"client-name\">Monir</span> \r\n                                <small className=\"client-msg-time\">12 Jan 2020 , 12.00 AM</small> :\r\n                            </div>\r\n                            <div className=\"msg\">\r\n                                Within each namespace, you can also define arbitrary channels that sockets can join and leave. These channels are called rooms. Rooms are used to further-separate concerns. Rooms also share the same socket connection like namespaces. One thing to keep in mind while using rooms is that they can only be joined on the server side.\r\n                            </div>\r\n                        </div> */}\r\n                        \r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <textarea name=\"input_msg\" value={this.state.input_msg} onChange={this.onChange} placeholder=\"Input msg here..\"></textarea>\r\n                        <div className=\"send-button text-center\"><button type=\"button\" className=\"send-btn\" onClick={this.onClick}>Send</button></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chatroom;\r\n\r\n","import React from 'react'\r\n\r\nconst SocketContext = React.createContext()\r\n\r\nexport default SocketContext","import React, { Component,useEffect } from \"react\"; \r\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\r\nimport io from \"socket.io-client\";\r\nimport axios from 'axios';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Login.css\";\r\n\r\nimport SocketContext from '../../socket-contex'\r\n\r\n\r\n\r\nclass Login extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            username:'',\r\n            password:'',\r\n            key:'',\r\n            msg:[]\r\n        }\r\n        \r\n        try {\r\n\r\n          this.props.socket.off('login');\r\n          this.props.socket.off('back_to_room');\r\n          \r\n        } catch (error) {\r\n          \r\n        }\r\n  \r\n        this.props.socket.on('back_to_room',(r)=>{\r\n          if (r === true) {\r\n            this.props.history.push(\"/chat\");\r\n          }\r\n        });\r\n  \r\n        this.props.socket.emit('back_to_room','loginPage');\r\n  \r\n        this.props.socket.on('login',(check)=>{\r\n         \r\n          if(check===true){\r\n            //console.log(\"H\");\r\n            this.props.history.push(\"/chat\");\r\n          }\r\n          else{\r\n            alert(\"Wrong Username or Password!!\");\r\n          }\r\n          \r\n        });\r\n        \r\n        // try {\r\n          \r\n        //   this.props.socket.off('login');\r\n\r\n        // } catch (error) {\r\n          \r\n        //   //window.location.reload();\r\n\r\n        // }\r\n\r\n        //this.props.socket.emit('check_loginpage','login');\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n    \r\n    componentDidMount(){    \r\n\r\n    }\r\n\r\n    onChange(e){\r\n        this.setState({[e.target.name]:e.target.value});\r\n        \r\n    }\r\n\r\n    onSubmit(e){\r\n        e.preventDefault();\r\n        const user = {\r\n            username: this.state.username,\r\n            password: this.state.password\r\n        }\r\n\r\n        this.props.socket.emit('login',this.state);\r\n        \r\n        //const url = 'http://localhost:5000/login';\r\n        //console.log(\"Hello\");\r\n        // fetch(url, {\r\n        //   method: 'POST',\r\n        //   headers: {\r\n        //       // 'Accept': 'application/json',\r\n        //       'Content-Type': 'application/json'\r\n        //   },\r\n        //   body: JSON.stringify(this.state)\r\n        //  }).then(response => response.json())\r\n        //  .then(json=>  {\r\n        //    this.setState({\r\n        //    msg: json});\r\n          \r\n        //   if(this.state.msg.uid != ''){\r\n        //     console.log(this.state.msg);\r\n        //   } \r\n           \r\n        //   });\r\n        \r\n         this.setState({ username:'',\r\n                         password:'',\r\n                         key:'',\r\n                         msg:[]\r\n                        });\r\n    }\r\n  render() {\r\n    return (\r\n        <div className=\"container\">\r\n            <p>{this.state.username}</p>\r\n            <div className=\"row\">\r\n              <h2 className=\"heading text-center w-100 p-3\">Login</h2>\r\n         </div>\r\n            <div className=\"row text-center\">\r\n              <form className=\"col-centered\"\r\n                    id=\"main-login\"\r\n                    action={this.props.action}\r\n                    method={this.props.method}\r\n                    onSubmit={this.onSubmit}>\r\n\r\n               <div className=\"register\">\r\n                 <input name=\"username\" value={this.state.username}  placeholder=\"User Name\" className=\"\" type=\"text\" onChange={this.onChange} />\r\n               </div>\r\n              <div className=\"register\">\r\n                <input name=\"password\" value={this.state.password} placeholder=\"Password\" className=\"\" type=\"password\" onChange={this.onChange}/>\r\n              </div>\r\n              <div className=\"register\">\r\n                <input name=\"key\" value={this.state.key} placeholder=\"Encryption Key\" className=\"\" type=\"text\" onChange={this.onChange}/>\r\n              </div>\r\n\r\n                  <button type=\"submit\" className=\"register-btn\" onSubmit={this.loginServer}>Login</button>\r\n            \r\n              </form> \r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nLogin.defaultProps = {\r\n  action: 'http://localhost:5000/login',\r\n  method: 'post'\r\n};\r\n\r\nexport default Login;","import React, { Component } from \"react\"; \r\n// import {Link} from \"react-router-dom\";\r\n// import io from \"socket.io-client\";\r\n// import axios from 'axios';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Register.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nclass Register extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            fname:'',\r\n            username:'',\r\n            password:'',\r\n            role:'',\r\n            msg:[]\r\n        }\r\n\r\n        this.props.socket.off('stay_logged');\r\n        this.props.socket.off('register');\r\n\r\n        this.props.socket.on('stay_logged',(r)=>{\r\n            if(r === false){\r\n                this.props.history.push(\"/\");\r\n            }\r\n            \r\n        });\r\n        this.props.socket.emit('stay_logged','k');\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onClick = this.onClick.bind(this);\r\n    }\r\n    \r\n\r\n    componentDidMount(){\r\n\r\n        this.props.socket.on('register',(r)=>{\r\n            if(r===true){\r\n                alert('Member Added Successfully!!!');\r\n            }\r\n            else if(r === 'exist')(\r\n                alert('User Name Already Taken!!')\r\n            )\r\n            else{\r\n                alert('Member Not Added !! There are a Problem!!')\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n\r\n    onChange(e){\r\n        this.setState({[e.target.name]:e.target.value});\r\n        \r\n    }\r\n\r\n    goHome=(e)=>{\r\n        e.preventDefault();\r\n        this.props.history.push(\"/chat\");\r\n        this.props.socket.emit('goHome',('back'));\r\n    }\r\n\r\n    onClick=(e)=>{\r\n        e.preventDefault();\r\n        // const user = {\r\n        //     username: this.state.username,\r\n        //     password: this.state.password\r\n        // }\r\n\r\n        const url = 'http://localhost:5000/register';\r\n        if (this.state.fname === '' || this.state.username==='' || this.state.password ==='' || this.state.role === '') {\r\n            alert(\"Fill All the Iput\");\r\n        }else{\r\n        // fetch(url, {\r\n        //   method: 'POST',\r\n        //   headers: {\r\n        //       // 'Accept': 'application/json',\r\n        //       'Content-Type': 'application/json'\r\n        //   },\r\n        //   body: JSON.stringify(this.state)\r\n        //  }).then(response => response.json())\r\n        //  .then(json=>  {\r\n        //    this.setState({\r\n        //    msg: json})\r\n          \r\n        //    console.log(this.state.msg);\r\n        //   });\r\n        \r\n        this.props.socket.emit('register',this.state);\r\n\r\n         this.setState({fname:'',\r\n                        username:'',\r\n                        password:'',\r\n                        role:'',\r\n                        msg:[]\r\n                    });\r\n        }\r\n    }\r\n  render() {\r\n    return (\r\n        <div className=\"container\">\r\n            <p>{this.state.role}</p>\r\n            <div className=\"row\">\r\n              <h2 className=\"heading text-center w-100 p-3\">Register</h2>\r\n         </div>\r\n            <div className=\"row text-center\">\r\n              <form className=\"col-centered\"\r\n                    id=\"main-login\"\r\n                    action={this.props.action}\r\n                    method={this.props.method}\r\n                    onSubmit={this.onSubmit}>\r\n\r\n              <div className=\" register\">\r\n                 <input name=\"fname\" value={this.state.fname}  placeholder=\"Full Name\" className=\"\" type=\"text\" onChange={this.onChange} />\r\n               </div>\r\n               <div className=\" register\">\r\n                 <input name=\"username\" value={this.state.username}  placeholder=\"User Name\" className=\"\" type=\"text\" onChange={this.onChange} />\r\n               </div>\r\n              <div className=\" register\">\r\n                <input name=\"password\" value={this.state.password} placeholder=\"Password\" className=\"\" type=\"password\" onChange={this.onChange}/>\r\n              </div>\r\n              <div className=\" register\">\r\n                <select name=\"role\" name=\"role\" value={this.state.role} id=\"inputState\" onChange={this.onChange}>\r\n                    <option selected >Role....</option>\r\n                    <option value=\"2\">Member</option>\r\n                    <option value=\"1\">Admin</option>\r\n                </select>\r\n              </div>\r\n              \r\n                  <button className=\"register-btn\" onClick={this.onClick}>Register</button>\r\n                  <button onClick={this.goHome} className=\"home-link\">Goto Room</button>\r\n              </form> \r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nRegister.defaultProps = {\r\n  action: 'http://localhost:5000/login',\r\n  method: 'post'\r\n};\r\n\r\nexport default Register;","import React from 'react';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport './App.css';\n\nimport Join from \"./component/Join/Join\";\nimport Chat from \"./component/Chatroom/Chatroom\";\nimport Login from './component/Login/Login';\nimport Register from './component/Register/Register';\nimport SocketContext from './socket-contex'\n\nimport io from \"socket.io-client\";\n\n\nconst ENDPOINT = 'localhost:5000';\nconst socket = io.connect(ENDPOINT);\n// import * as io from 'socket.io-client'\n\n// const socket = io()\n\n// import Header from './Header';\n// import ControlButton from './ControlButton';\n// import ViewMessage from './ViewMessage';\n// import Member from './Member'\n\n// const App = ()=>{\n//   <Router>\n//     <Route path=\"/\" exact component={Join} />\n//     <Route path=\"/chat\" exact component={Chat} />\n//   </Router>\n// };\n\n\n\nconst App = (props) => {\n  \n  return (\n    \n    // <SocketContext.Provider value={socket}>\n    // <Chat></Chat>\n    // <Login></Login>\n    // </SocketContext.Provider> \n    \n    <Router>\n      \n      {/* <Route path=\"/j\" exact component={Join} /> */}\n      \n      <Route path=\"/chat\" exact component={(props) => (<Chat socket={socket} {...props} />)}/>\n      <Route path=\"/\" exact component={(props) => (<Login socket={socket} {...props} />)}  />\n      <Route path=\"/register\" exact component={(props) => (<Register socket={socket} {...props} />)}  />\n      {/* <Route path=\"/register\" exact component={Register} /> */}\n      {/* <Route path=\"/register\" exact component={Register} /> */}\n    </Router>\n    \n  );\n};\n\n\n// function App() {\n//   return (\n//     <Router>\n//     <Route path=\"/\" exact component={Join} />\n//     <Route path=\"/chat\" exact component={Chat} />\n//   </Router>\n//     // <div className=\"App\">\n//     //   <div className=\"container\">\n//     //       <Header></Header>\n//     //       <ControlButton></ControlButton>\n//     //       <div className=\"row\">\n//     //         <Member></Member>\n//     //         <ViewMessage></ViewMessage>\n//     //       </div>\n//     //   </div>\n//     // </div>\n//   );\n// }\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n// import $ from 'jquery';\n// import Popper from 'popper.js';\n// import 'bootstrap/dist/js/bootstrap.bundle.min';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import io from \"socket.io-client\";\n\n// const socket;\n// const ENDPOINT = 'localhost:5000';\n// socket = io.connect(ENDPOINT);\n\nReactDOM.render(<App />, document.querySelector('#root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}